# Generated by Django 4.2.7 on 2025-09-01 03:03

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=30, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=30, verbose_name="last name"),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("student", "Student"),
                            ("teacher", "Teacher"),
                            ("admin", "Administrator"),
                            ("parent", "Parent"),
                        ],
                        default="student",
                        max_length=20,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True, null=True, upload_to="profile_pictures/"
                    ),
                ),
                ("bio", models.TextField(blank=True, null=True)),
                ("is_email_verified", models.BooleanField(default=False)),
                (
                    "email_verification_token",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "theme_preference",
                    models.CharField(
                        choices=[("light", "Light"), ("dark", "Dark")],
                        default="light",
                        max_length=10,
                    ),
                ),
                ("language_preference", models.CharField(default="en", max_length=10)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "ordering": ["-created_at"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AccessPoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("location", models.CharField(max_length=200)),
                (
                    "access_point_type",
                    models.CharField(
                        choices=[
                            ("door", "Door"),
                            ("gate", "Gate"),
                            ("turnstile", "Turnstile"),
                            ("elevator", "Elevator"),
                            ("room", "Room"),
                        ],
                        default="door",
                        max_length=20,
                    ),
                ),
                ("device_id", models.CharField(max_length=100, unique=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("mac_address", models.CharField(blank=True, max_length=17)),
                (
                    "allowed_roles",
                    models.JSONField(
                        default=list,
                        help_text="User roles allowed to access this point",
                    ),
                ),
                (
                    "allowed_card_types",
                    models.JSONField(
                        default=list,
                        help_text="Card types allowed to access this point",
                    ),
                ),
                (
                    "time_restrictions",
                    models.JSONField(
                        default=dict, help_text="Time-based access restrictions"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("last_ping", models.DateTimeField(blank=True, null=True)),
                ("firmware_version", models.CharField(blank=True, max_length=20)),
                ("emergency_override", models.BooleanField(default=False)),
                ("emergency_message", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="IDCardTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("background_color", models.CharField(default="#ffffff", max_length=7)),
                ("text_color", models.CharField(default="#000000", max_length=7)),
                ("accent_color", models.CharField(default="#007bff", max_length=7)),
                (
                    "layout_config",
                    models.JSONField(
                        default=dict, help_text="Layout configuration for card elements"
                    ),
                ),
                (
                    "background_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="id_templates/backgrounds/"
                    ),
                ),
                (
                    "logo_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="id_templates/logos/"
                    ),
                ),
                ("title_font", models.CharField(default="Arial", max_length=50)),
                ("body_font", models.CharField(default="Arial", max_length=50)),
                ("is_active", models.BooleanField(default=True)),
                ("is_default", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_key", models.CharField(max_length=40, unique=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("device_type", models.CharField(blank=True, max_length=50)),
                ("browser", models.CharField(blank=True, max_length=50)),
                ("os", models.CharField(blank=True, max_length=50)),
                ("location", models.CharField(blank=True, max_length=100)),
                ("login_time", models.DateTimeField(auto_now_add=True)),
                ("logout_time", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-login_time"],
            },
        ),
        migrations.CreateModel(
            name="StudentIDCard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "card_number",
                    models.CharField(
                        help_text="Unique card identifier", max_length=20, unique=True
                    ),
                ),
                (
                    "card_type",
                    models.CharField(
                        choices=[
                            ("standard", "Standard Student"),
                            ("staff", "Staff/Faculty"),
                            ("visitor", "Visitor"),
                            ("temporary", "Temporary"),
                        ],
                        default="standard",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("lost", "Lost"),
                            ("stolen", "Stolen"),
                            ("expired", "Expired"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("issued_date", models.DateTimeField(auto_now_add=True)),
                ("expiry_date", models.DateField(blank=True, null=True)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                (
                    "rfid_uid",
                    models.CharField(
                        blank=True,
                        help_text="RFID chip unique identifier",
                        max_length=50,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "nfc_data",
                    models.TextField(
                        blank=True, help_text="NFC data payload", null=True
                    ),
                ),
                (
                    "barcode_data",
                    models.CharField(
                        blank=True, help_text="Barcode data", max_length=100, null=True
                    ),
                ),
                (
                    "qr_code",
                    models.ImageField(
                        blank=True, null=True, upload_to="id_cards/qr_codes/"
                    ),
                ),
                (
                    "barcode_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="id_cards/barcodes/"
                    ),
                ),
                (
                    "card_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="id_cards/generated/"
                    ),
                ),
                (
                    "access_level",
                    models.JSONField(
                        default=dict, help_text="Access permissions for different areas"
                    ),
                ),
                (
                    "allowed_times",
                    models.JSONField(
                        default=dict, help_text="Time restrictions for access"
                    ),
                ),
                (
                    "emergency_contact_name",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(blank=True, max_length=20),
                ),
                (
                    "medical_info",
                    models.TextField(
                        blank=True, help_text="Medical conditions/allergies"
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_cards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "student",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="id_card",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-issued_date"],
            },
        ),
        migrations.CreateModel(
            name="PasswordResetToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token", models.CharField(max_length=100, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("is_used", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="NotificationSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("push", "Push Notification"),
                            ("webhook", "Webhook"),
                        ],
                        max_length=20,
                    ),
                ),
                ("late_arrival", models.BooleanField(default=True)),
                ("early_departure", models.BooleanField(default=True)),
                ("missed_class", models.BooleanField(default=True)),
                ("access_denied", models.BooleanField(default=True)),
                ("card_lost_stolen", models.BooleanField(default=True)),
                ("quiet_hours_start", models.TimeField(blank=True, null=True)),
                ("quiet_hours_end", models.TimeField(blank=True, null=True)),
                ("email_address", models.EmailField(blank=True, max_length=254)),
                ("phone_number", models.CharField(blank=True, max_length=20)),
                ("webhook_url", models.URLField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_settings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AttendanceRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "attendance_type",
                    models.CharField(
                        choices=[
                            ("check_in", "Check In"),
                            ("check_out", "Check Out"),
                            ("class_entry", "Class Entry"),
                            ("class_exit", "Class Exit"),
                            ("building_entry", "Building Entry"),
                            ("building_exit", "Building Exit"),
                        ],
                        default="check_in",
                        max_length=20,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("location", models.CharField(blank=True, max_length=100)),
                ("device_id", models.CharField(blank=True, max_length=100)),
                ("classroom_id", models.PositiveIntegerField(blank=True, null=True)),
                ("course_id", models.PositiveIntegerField(blank=True, null=True)),
                ("rfid_uid", models.CharField(blank=True, max_length=50)),
                ("nfc_data", models.TextField(blank=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("is_valid", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "id_card",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="attendance_records",
                        to="users.studentidcard",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendance_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="AccessLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "result",
                    models.CharField(
                        choices=[
                            ("granted", "Granted"),
                            ("denied", "Denied"),
                            ("error", "Error"),
                        ],
                        default="denied",
                        max_length=20,
                    ),
                ),
                ("reason", models.TextField(blank=True)),
                ("rfid_uid", models.CharField(blank=True, max_length=50)),
                ("nfc_data", models.TextField(blank=True)),
                ("device_fingerprint", models.CharField(blank=True, max_length=100)),
                (
                    "access_point",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_logs",
                        to="users.accesspoint",
                    ),
                ),
                (
                    "id_card",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="access_logs",
                        to="users.studentidcard",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.AddIndex(
            model_name="studentidcard",
            index=models.Index(
                fields=["card_number"], name="users_stude_card_nu_e6f6d9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studentidcard",
            index=models.Index(
                fields=["rfid_uid"], name="users_stude_rfid_ui_5f1387_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studentidcard",
            index=models.Index(fields=["status"], name="users_stude_status_4db8d0_idx"),
        ),
        migrations.AddIndex(
            model_name="studentidcard",
            index=models.Index(
                fields=["card_type"], name="users_stude_card_ty_29d8eb_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="notificationsettings",
            unique_together={("user", "notification_type")},
        ),
        migrations.AddIndex(
            model_name="attendancerecord",
            index=models.Index(
                fields=["student", "timestamp"], name="users_atten_student_fc9b8d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="attendancerecord",
            index=models.Index(
                fields=["attendance_type", "timestamp"],
                name="users_atten_attenda_82403b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="attendancerecord",
            index=models.Index(
                fields=["classroom_id", "timestamp"],
                name="users_atten_classro_698513_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="attendancerecord",
            index=models.Index(
                fields=["is_valid"], name="users_atten_is_vali_681a5e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="accesslog",
            index=models.Index(
                fields=["user", "timestamp"], name="users_acces_user_id_1e995e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="accesslog",
            index=models.Index(
                fields=["access_point", "timestamp"],
                name="users_acces_access__989391_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="accesslog",
            index=models.Index(fields=["result"], name="users_acces_result_b316d1_idx"),
        ),
    ]
