# Generated by Django 4.2.7 on 2025-09-01 03:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("courses", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Classroom",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("scheduled_at", models.DateTimeField(verbose_name="scheduled at")),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        default=60, verbose_name="duration (minutes)"
                    ),
                ),
                (
                    "actual_start_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="actual start time"
                    ),
                ),
                (
                    "actual_end_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="actual end time"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="scheduled",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "is_recording_enabled",
                    models.BooleanField(default=True, verbose_name="recording enabled"),
                ),
                (
                    "max_participants",
                    models.PositiveIntegerField(
                        default=50, verbose_name="max participants"
                    ),
                ),
                (
                    "is_private",
                    models.BooleanField(default=False, verbose_name="is private"),
                ),
                (
                    "access_code",
                    models.CharField(
                        blank=True, max_length=10, verbose_name="access code"
                    ),
                ),
                (
                    "allowed_emails",
                    models.JSONField(
                        blank=True, default=list, verbose_name="allowed emails"
                    ),
                ),
                (
                    "meeting_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        unique=True,
                        verbose_name="meeting ID",
                    ),
                ),
                (
                    "meeting_password",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="meeting password"
                    ),
                ),
                ("join_url", models.URLField(blank=True, verbose_name="join URL")),
                (
                    "recording_url",
                    models.URLField(blank=True, verbose_name="recording URL"),
                ),
                (
                    "recording_duration",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="recording duration"
                    ),
                ),
                (
                    "total_participants",
                    models.PositiveIntegerField(
                        default=0, verbose_name="total participants"
                    ),
                ),
                (
                    "peak_participants",
                    models.PositiveIntegerField(
                        default=0, verbose_name="peak participants"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="classrooms",
                        to="courses.course",
                    ),
                ),
                (
                    "instructor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="classrooms_taught",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "classroom",
                "verbose_name_plural": "classrooms",
                "ordering": ["-scheduled_at"],
            },
        ),
        migrations.CreateModel(
            name="Poll",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question", models.TextField(verbose_name="question")),
                ("options", models.JSONField(verbose_name="options")),
                (
                    "correct_answer",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="correct answer"
                    ),
                ),
                (
                    "is_anonymous",
                    models.BooleanField(default=False, verbose_name="is anonymous"),
                ),
                (
                    "allow_multiple_answers",
                    models.BooleanField(
                        default=False, verbose_name="allow multiple answers"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                ("responses", models.JSONField(default=dict, verbose_name="responses")),
                (
                    "total_responses",
                    models.PositiveIntegerField(
                        default=0, verbose_name="total responses"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "classroom",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polls",
                        to="classrooms.classroom",
                    ),
                ),
            ],
            options={
                "verbose_name": "poll",
                "verbose_name_plural": "polls",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ClassroomRecording",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "file",
                    models.FileField(
                        upload_to="classroom_recordings/", verbose_name="recording file"
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(verbose_name="file size (bytes)"),
                ),
                (
                    "duration_seconds",
                    models.PositiveIntegerField(verbose_name="duration (seconds)"),
                ),
                (
                    "recording_started_at",
                    models.DateTimeField(verbose_name="recording started at"),
                ),
                (
                    "recording_ended_at",
                    models.DateTimeField(verbose_name="recording ended at"),
                ),
                (
                    "is_public",
                    models.BooleanField(default=False, verbose_name="is public"),
                ),
                (
                    "view_count",
                    models.PositiveIntegerField(default=0, verbose_name="view count"),
                ),
                (
                    "download_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="download count"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "allowed_users",
                    models.ManyToManyField(
                        blank=True,
                        related_name="accessible_recordings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "classroom",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recordings",
                        to="classrooms.classroom",
                    ),
                ),
            ],
            options={
                "verbose_name": "classroom recording",
                "verbose_name_plural": "classroom recordings",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChatMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("text", "Text"),
                            ("system", "System"),
                            ("question", "Question"),
                            ("answer", "Answer"),
                        ],
                        default="text",
                        max_length=20,
                        verbose_name="message type",
                    ),
                ),
                ("content", models.TextField(verbose_name="content")),
                (
                    "is_approved",
                    models.BooleanField(default=True, verbose_name="is approved"),
                ),
                ("reactions", models.JSONField(default=dict, verbose_name="reactions")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "classroom",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_messages",
                        to="classrooms.classroom",
                    ),
                ),
                (
                    "moderated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="moderated_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_message",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="classrooms.chatmessage",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "chat message",
                "verbose_name_plural": "chat messages",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="BreakoutRoom",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "max_participants",
                    models.PositiveIntegerField(
                        default=10, verbose_name="max participants"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                (
                    "meeting_id",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="meeting ID"
                    ),
                ),
                ("join_url", models.URLField(blank=True, verbose_name="join URL")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "classroom",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="breakout_rooms",
                        to="classrooms.classroom",
                    ),
                ),
                (
                    "participants",
                    models.ManyToManyField(
                        blank=True,
                        related_name="breakout_rooms",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "breakout room",
                "verbose_name_plural": "breakout rooms",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="PollResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("answers", models.JSONField(verbose_name="answers")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "poll",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="poll_responses",
                        to="classrooms.poll",
                    ),
                ),
                (
                    "respondent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="poll_responses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "poll response",
                "verbose_name_plural": "poll responses",
                "ordering": ["created_at"],
                "unique_together": {("poll", "respondent")},
            },
        ),
        migrations.CreateModel(
            name="ClassroomParticipant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("student", "Student"),
                            ("instructor", "Instructor"),
                            ("observer", "Observer"),
                        ],
                        default="student",
                        max_length=20,
                        verbose_name="role",
                    ),
                ),
                (
                    "joined_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="joined at"),
                ),
                (
                    "left_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="left at"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                (
                    "total_time_minutes",
                    models.PositiveIntegerField(
                        default=0, verbose_name="total time (minutes)"
                    ),
                ),
                (
                    "messages_sent",
                    models.PositiveIntegerField(
                        default=0, verbose_name="messages sent"
                    ),
                ),
                (
                    "questions_asked",
                    models.PositiveIntegerField(
                        default=0, verbose_name="questions asked"
                    ),
                ),
                (
                    "reactions_given",
                    models.PositiveIntegerField(
                        default=0, verbose_name="reactions given"
                    ),
                ),
                (
                    "can_speak",
                    models.BooleanField(default=True, verbose_name="can speak"),
                ),
                (
                    "can_share_screen",
                    models.BooleanField(default=False, verbose_name="can share screen"),
                ),
                (
                    "can_record",
                    models.BooleanField(default=False, verbose_name="can record"),
                ),
                (
                    "classroom",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="classrooms.classroom",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="classroom_participation",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "classroom participant",
                "verbose_name_plural": "classroom participants",
                "ordering": ["joined_at"],
                "unique_together": {("classroom", "user")},
            },
        ),
    ]
